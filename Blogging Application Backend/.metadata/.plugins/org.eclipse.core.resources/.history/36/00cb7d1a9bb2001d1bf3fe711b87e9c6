package com.enc.blog.exceptions;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.enc.blog.payloads.UserNotFoundExceptionResponse;
import com.enc.blog.payloads.ValidationExceptionResponse;

@ControllerAdvice
public class GlobalExceptionHandler {
	
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<UserNotFoundExceptionResponse> userNotFoundExceptionHandler( ResourceNotFoundException ex) {
		UserNotFoundExceptionResponse response = UserNotFoundExceptionResponse.builder().message(ex.getMessage()).success(true).status(HttpStatus.NOT_FOUND).build();
		ResponseEntity<UserNotFoundExceptionResponse> exceptionResponse = new ResponseEntity<>(response,HttpStatus.NOT_FOUND);
		return exceptionResponse;
	}
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<ValidationExceptionResponse> methodArgumentNotValidExceptionHandler(MethodArgumentNotValidException ex){
		ValidationExceptionResponse response = ValidationExceptionResponse.builder().message(ex.getMessage()).success(true).httpStatus(HttpStatus.BAD_REQUEST).build();
		ResponseEntity<ValidationExceptionResponse> exceptionResponse = new ResponseEntity<>(response,HttpStatus.BAD_REQUEST);
		return exceptionResponse;
	}

}
